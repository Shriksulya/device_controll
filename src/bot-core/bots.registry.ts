import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { BotConfig, Strategy } from './interfaces';
import { BotEngine } from './bot-engine';
import { NoopExchange } from './adapters/exchange.noop';
import { BitgetExchangeGateway } from './adapters/exchange.bitget';
import { TelegramNotifier } from './adapters/notifier.telegram';
import { TrendServiceProvider } from './adapters/trend.provider';
import { TrendService } from '../trend/trend.service';
import { TelegramService } from '../services/telegram.service';
import { VolumeUpService } from '../services/volume-up.service';
import { PositionsStore } from './positions.store';
import { SmartVolDefaultStrategy } from './strategies/smartvol.default.strategy';
import { SmartVolPartialCloseStrategy } from './strategies/smartvol.partial-close.strategy';
import { SmartVolumeStrategy } from './strategies/smartvolume.strategy';
import { DominationStrategy } from './strategies/domination.strategy';
import { TrendPivotStrategy } from './strategies/trend-pivot.strategy';
import { ThreeAlertsStrategy } from './strategies/three-alerts.strategy';
import { BitgetService } from '../integrations/bitget/bitget.service';

@Injectable()
export class BotsRegistry {
  private readonly log = new Logger(BotsRegistry.name);
  private bots = new Map<string, BotEngine>();

  constructor(
    private readonly cfg: ConfigService,
    private readonly trend: TrendService,
    private readonly telegram: TelegramService,
    private readonly volumeUp: VolumeUpService,
    private readonly positions: PositionsStore,
    private readonly bitget: BitgetService,
  ) {}

  all() {
    return [...this.bots.values()];
  }

  async initFromConfig() {
    this.log.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞...');
    const list = this.cfg.get<BotConfig[]>('bots') || [];
    this.log.log(`üìã –ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: ${list.length}`);

    const trendProvider = new TrendServiceProvider(this.trend);

    for (const c of list) {
      this.log.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –±–æ—Ç–∞: ${c.name} (enabled: ${c.enabled})`);

      if (!c.enabled) {
        this.log.log(`‚è∏Ô∏è –ë–æ—Ç ${c.name} –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é`);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      if (c.strategy === 'domination') {
        // –î–ª—è Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ telegram
        this.log.log(`üéØ –ë–æ—Ç ${c.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏—é`);
      } else if (c.strategy === 'trend-pivot') {
        // –î–ª—è TrendPivot —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ telegram
        this.log.log(`üéØ –ë–æ—Ç ${c.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TrendPivot —Å—Ç—Ä–∞—Ç–µ–≥–∏—é`);
      } else if (c.strategy === 'three-alerts') {
        // –î–ª—è ThreeAlerts —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ telegram
        this.log.log(`üéØ –ë–æ—Ç ${c.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ThreeAlerts —Å—Ç—Ä–∞—Ç–µ–≥–∏—é`);
      } else {
        // –î–ª—è SmartVol —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º smartvol –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if (!c.smartvol?.baseUsd || isNaN(c.smartvol.baseUsd)) {
          this.log.error(
            `‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ ${c.name}: baseUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º`,
          );
          continue;
        }

        if (!c.smartvol?.addFraction || isNaN(c.smartvol.addFraction)) {
          this.log.error(
            `‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ ${c.name}: addFraction –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º`,
          );
          continue;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–ª–µ–≥—Ä–∞–º–∞
      if (!c.telegram_channel) {
        this.log.error(
          `‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ ${c.name}: telegram_channel –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`,
        );
        continue;
      }

      const telegramConfig = this.cfg.get(`telegram.${c.telegram_channel}`);
      if (!telegramConfig?.token || !telegramConfig?.chatId) {
        this.log.error(
          `‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –¥–ª—è –±–æ—Ç–∞ ${c.name}: —Ç–æ–∫–µ–Ω –∏–ª–∏ chatId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã`,
        );
        continue;
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É
      this.log.log(`üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É –¥–ª—è –±–æ—Ç–∞ ${c.name}...`);
      const telegramTest = await this.telegram.testConnection(
        c.telegram_channel,
      );
      if (!telegramTest) {
        this.log.error(
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É –¥–ª—è –±–æ—Ç–∞ ${c.name}`,
        );
        continue;
      }
      this.log.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É —É—Å–ø–µ—à–Ω–æ –¥–ª—è –±–æ—Ç–∞ ${c.name}`);

      this.log.log(`‚öôÔ∏è –°–æ–∑–¥–∞—é –±–æ—Ç–∞ ${c.name} —Å –ø—Ä–æ—Ñ–∏–ª–µ–º ${c.exchange_profile}`);

      const exchange = c.prod
        ? new BitgetExchangeGateway(this.bitget)
        : new NoopExchange();
      const notifier = new TelegramNotifier(this.telegram, c.telegram_channel);

      // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      let strategy: Strategy;
      if (c.strategy === 'domination') {
        strategy = new DominationStrategy(this.positions, this.telegram);
        this.log.log(`üéØ –ë–æ—Ç ${c.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏—é`);
      } else if (c.strategy === 'trend-pivot') {
        strategy = new TrendPivotStrategy(this.positions);
        this.log.log(`üéØ –ë–æ—Ç ${c.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TrendPivot —Å—Ç—Ä–∞—Ç–µ–≥–∏—é`);
      } else if (c.strategy === 'three-alerts') {
        strategy = new ThreeAlertsStrategy(this.positions, notifier);
        this.log.log(`üéØ –ë–æ—Ç ${c.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ThreeAlerts —Å—Ç—Ä–∞—Ç–µ–≥–∏—é`);
      } else if (c.strategy === 'partial-close') {
        strategy = new SmartVolPartialCloseStrategy(
          this.positions,
          this.volumeUp,
        );
        this.log.log(
          `üîÑ –ë–æ—Ç ${c.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏—é`,
        );
      } else if (c.strategy === 'smartvolume') {
        strategy = new SmartVolumeStrategy(this.positions, this.volumeUp);
        this.log.log(`üìä –ë–æ—Ç ${c.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏—é`);
      } else {
        strategy = new SmartVolDefaultStrategy(this.positions, this.volumeUp);
        this.log.log(`üìä –ë–æ—Ç ${c.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SmartVol —Å—Ç—Ä–∞—Ç–µ–≥–∏—é`);
      }

      const engine = new BotEngine(
        c,
        exchange,
        notifier,
        trendProvider,
        strategy,
      );
      this.bots.set(c.name, engine);
      this.log.log(`‚úÖ –ë–æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${c.name}`);
    }

    this.log.log(`üéØ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–≤: ${this.bots.size}`);
  }
}
