import { Strategy } from '../interfaces';
import { toBitgetSymbolId } from '../utils';
import { PositionsStore } from '../positions.store';
import { Logger } from '@nestjs/common';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface TrendState {
  symbol: string;
  botName: string;
  timeframe: string; // '15m' –∏–ª–∏ '1h'
  longTrendCount: number;
  shortTrendCount: number;
  longPivotCount: number;
  shortPivotCount: number;
  strongLongPivotCount: number;
  strongShortPivotCount: number;
  lastUpdate: Date;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è 4h —Ç—Ä–µ–Ω–¥–∞
interface FourHourTrend {
  symbol: string;
  longTrendCount: number;
  shortTrendCount: number;
  longPivotCount: number;
  shortPivotCount: number;
  strongLongPivotCount: number;
  strongShortPivotCount: number;
  lastUpdate: Date;
}

export class TrendPivotStrategy implements Strategy {
  private readonly logger = new Logger(TrendPivotStrategy.name);

  // In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è 15m –∏ 1h
  private trendStates = new Map<string, TrendState>();

  // In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ 4h —Ç—Ä–µ–Ω–¥–æ–≤
  private fourHourTrends = new Map<string, FourHourTrend>();

  constructor(private readonly store: PositionsStore) {}

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
  private getTrendStateKey(
    botName: string,
    symbol: string,
    timeframe: string,
  ): string {
    return `${botName}:${symbol}:${timeframe}`;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è 4h —Ç—Ä–µ–Ω–¥–∞
  private getFourHourKey(symbol: string): string {
    return `${symbol}:4h`;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
  private getOrCreateTrendState(
    botName: string,
    symbol: string,
    timeframe: string,
  ): TrendState {
    const key = this.getTrendStateKey(botName, symbol, timeframe);
    let state = this.trendStates.get(key);

    if (!state) {
      state = {
        symbol,
        botName,
        timeframe,
        longTrendCount: 0,
        shortTrendCount: 0,
        longPivotCount: 0,
        shortPivotCount: 0,
        strongLongPivotCount: 0,
        strongShortPivotCount: 0,
        lastUpdate: new Date(),
      };
      this.trendStates.set(key, state);
    }

    return state;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º 4h —Ç—Ä–µ–Ω–¥
  private getOrCreateFourHourTrend(symbol: string): FourHourTrend {
    const key = this.getFourHourKey(symbol);
    let trend = this.fourHourTrends.get(key);

    if (!trend) {
      trend = {
        symbol,
        longTrendCount: 0,
        shortTrendCount: 0,
        longPivotCount: 0,
        shortPivotCount: 0,
        strongLongPivotCount: 0,
        strongShortPivotCount: 0,
        lastUpdate: new Date(),
      };
      this.fourHourTrends.set(key, trend);
    }

    return trend;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
  private getTrendDirection(counts: {
    long: number;
    short: number;
  }): 'long' | 'short' | 'neutral' {
    if (counts.long > counts.short) return 'long';
    if (counts.short > counts.long) return 'short';
    return 'neutral';
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
  private calculateTotalTrendCounts(state: TrendState) {
    const longTotal =
      state.longTrendCount + state.longPivotCount + state.strongLongPivotCount;
    const shortTotal =
      state.shortTrendCount +
      state.shortPivotCount +
      state.strongShortPivotCount;
    return { long: longTotal, short: shortTotal };
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è 4h
  private calculateFourHourTrendCounts(trend: FourHourTrend) {
    const longTotal =
      trend.longTrendCount + trend.longPivotCount + trend.strongLongPivotCount;
    const shortTotal =
      trend.shortTrendCount +
      trend.shortPivotCount +
      trend.strongShortPivotCount;
    return { long: longTotal, short: shortTotal };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤–æ–π—Ç–∏ –≤ –ø–æ–∑–∏—Ü–∏—é
  private async canEnterPosition(
    bot: any,
    symbol: string,
    timeframe: string,
  ): Promise<boolean> {
    const state = this.getOrCreateTrendState(bot.name, symbol, timeframe);
    const fourHourTrend = this.getOrCreateFourHourTrend(symbol);

    const timeframeDirection = this.getTrendDirection(
      this.calculateTotalTrendCounts(state),
    );
    const fourHourDirection = this.getTrendDirection(
      this.calculateFourHourTrendCounts(fourHourTrend),
    );

    // –í—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç
    return (
      timeframeDirection === fourHourDirection &&
      timeframeDirection !== 'neutral'
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
  private async shouldExitPosition(
    bot: any,
    symbol: string,
    timeframe: string,
  ): Promise<boolean> {
    const state = this.getOrCreateTrendState(bot.name, symbol, timeframe);
    const fourHourTrend = this.getOrCreateFourHourTrend(symbol);

    const timeframeDirection = this.getTrendDirection(
      this.calculateTotalTrendCounts(state),
    );
    const fourHourDirection = this.getTrendDirection(
      this.calculateFourHourTrendCounts(fourHourTrend),
    );

    // –í—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    return timeframeDirection !== fourHourDirection;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ long trend –∞–ª–µ—Ä—Ç–∞
  async onLongTrend(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üìà Long Trend –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    if (timeframe === '4h') {
      // 4h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º 4h —Ç—Ä–µ–Ω–¥
      const trend = this.getOrCreateFourHourTrend(alert.symbol);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º short —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º long
      trend.shortTrendCount = 0;
      trend.shortPivotCount = 0;
      trend.strongShortPivotCount = 0;
      trend.longTrendCount++;
      trend.lastUpdate = new Date();

      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      // 15m/1h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      const state = this.getOrCreateTrendState(
        bot.name,
        alert.symbol,
        timeframe,
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º short —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º long
      state.shortTrendCount = 0;
      state.shortPivotCount = 0;
      state.strongShortPivotCount = 0;
      state.longTrendCount++;
      state.lastUpdate = new Date();

      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ short trend –∞–ª–µ—Ä—Ç–∞
  async onShortTrend(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üìâ Short Trend –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    if (timeframe === '4h') {
      // 4h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º 4h —Ç—Ä–µ–Ω–¥
      const trend = this.getOrCreateFourHourTrend(alert.symbol);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º long —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º short
      trend.longTrendCount = 0;
      trend.longPivotCount = 0;
      trend.strongLongPivotCount = 0;
      trend.shortTrendCount++;
      trend.lastUpdate = new Date();

      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      // 15m/1h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      const state = this.getOrCreateTrendState(
        bot.name,
        alert.symbol,
        timeframe,
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º long —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º short
      state.longTrendCount = 0;
      state.longPivotCount = 0;
      state.strongLongPivotCount = 0;
      state.shortTrendCount++;
      state.lastUpdate = new Date();

      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ long pivot point –∞–ª–µ—Ä—Ç–∞
  async onLongPivotPoint(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üìä Long Pivot Point –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    if (timeframe === '4h') {
      // 4h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º 4h —Ç—Ä–µ–Ω–¥
      const trend = this.getOrCreateFourHourTrend(alert.symbol);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º short —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º long
      trend.shortTrendCount = 0;
      trend.shortPivotCount = 0;
      trend.strongShortPivotCount = 0;
      trend.longPivotCount++;
      trend.lastUpdate = new Date();

      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      // 15m/1h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      const state = this.getOrCreateTrendState(
        bot.name,
        alert.symbol,
        timeframe,
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º short —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º long
      state.shortTrendCount = 0;
      state.shortPivotCount = 0;
      state.strongShortPivotCount = 0;
      state.longPivotCount++;
      state.lastUpdate = new Date();

      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ short pivot point –∞–ª–µ—Ä—Ç–∞
  async onShortPivotPoint(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üìä Short Pivot Point –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    if (timeframe === '4h') {
      // 4h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º 4h —Ç—Ä–µ–Ω–¥
      const trend = this.getOrCreateFourHourTrend(alert.symbol);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º long —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º short
      trend.longPivotCount = 0;
      trend.longTrendCount = 0;
      trend.strongLongPivotCount = 0;
      trend.shortPivotCount++;
      trend.lastUpdate = new Date();

      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      // 15m/1h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      const state = this.getOrCreateTrendState(
        bot.name,
        alert.symbol,
        timeframe,
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º long —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º short
      state.longTrendCount = 0;
      state.longPivotCount = 0;
      state.strongLongPivotCount = 0;
      state.shortPivotCount++;
      state.lastUpdate = new Date();

      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ strong long pivot point –∞–ª–µ—Ä—Ç–∞
  async onStrongLongPivotPoint(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üöÄ Strong Long Pivot Point –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    if (timeframe === '4h') {
      // 4h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º 4h —Ç—Ä–µ–Ω–¥
      const trend = this.getOrCreateFourHourTrend(alert.symbol);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º short —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º strong long
      trend.shortTrendCount = 0;
      trend.shortPivotCount = 0;
      trend.strongShortPivotCount = 0;
      trend.strongLongPivotCount++;
      trend.lastUpdate = new Date();

      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      // 15m/1h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      const state = this.getOrCreateTrendState(
        bot.name,
        alert.symbol,
        timeframe,
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º short —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º strong long
      state.shortTrendCount = 0;
      state.shortPivotCount = 0;
      state.strongShortPivotCount = 0;
      state.strongLongPivotCount++;
      state.lastUpdate = new Date();

      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ strong short pivot point –∞–ª–µ—Ä—Ç–∞
  async onStrongShortPivotPoint(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üöÄ Strong Short Pivot Point –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    if (timeframe === '4h') {
      // 4h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º 4h —Ç—Ä–µ–Ω–¥
      const trend = this.getOrCreateFourHourTrend(alert.symbol);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º long —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º strong short
      trend.longTrendCount = 0;
      trend.longPivotCount = 0;
      trend.strongLongPivotCount = 0;
      trend.strongShortPivotCount++;
      trend.lastUpdate = new Date();

      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      // 15m/1h –∞–ª–µ—Ä—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      const state = this.getOrCreateTrendState(
        bot.name,
        alert.symbol,
        timeframe,
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º long —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º strong short
      state.longTrendCount = 0;
      state.longPivotCount = 0;
      state.strongLongPivotCount = 0;
      state.strongShortPivotCount++;
      state.lastUpdate = new Date();

      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è 15m/1h
  private async processTrendChange(
    bot: any,
    symbol: string,
    timeframe: string,
  ): Promise<void> {
    const existing = await this.store.findOpen(bot.name, symbol);

    if (existing) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
      if (await this.shouldExitPosition(bot, symbol, timeframe)) {
        this.logger.log(
          `üîÑ –¢—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è –¥–ª—è ${symbol} –Ω–∞ ${timeframe} - –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–∑–∏—Ü–∏–∏`,
        );
        await this.exitPosition(bot, symbol, existing);
      }
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤–æ–π—Ç–∏ –≤ –ø–æ–∑–∏—Ü–∏—é
      if (await this.canEnterPosition(bot, symbol, timeframe)) {
        this.logger.log(
          `‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç –¥–ª—è ${symbol} –Ω–∞ ${timeframe} - –≤—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é`,
        );
        await this.enterPosition(bot, symbol, timeframe);
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è 4h —Ç—Ä–µ–Ω–¥–∞
  private async processFourHourTrendChange(
    bot: any,
    symbol: string,
  ): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –±–æ—Ç–∞
    const timeframes = ['15m', '1h'];

    for (const timeframe of timeframes) {
      const state = this.trendStates.get(
        this.getTrendStateKey(bot.name, symbol, timeframe),
      );
      if (state) {
        await this.processTrendChange(bot, symbol, timeframe);
      }
    }
  }

  // –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é
  private async enterPosition(
    bot: any,
    symbol: string,
    timeframe: string,
  ): Promise<void> {
    const existing = await this.store.findOpen(bot.name, symbol);
    if (existing) {
      this.logger.log(`‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è ${bot.name}`);
      return;
    }

    const symbolId = toBitgetSymbolId(symbol);
    const price = '0'; // –¶–µ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏

    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
      if (bot.cfg.smartvol?.leverage) {
        await bot.exchange.ensureLeverage?.(
          symbolId,
          String(bot.cfg.smartvol.leverage),
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const baseUsd = bot.cfg.smartvol?.baseUsd || 200;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
      const size = await bot.exchange.calcSizeFromUsd?.(
        symbolId,
        0, // –¶–µ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
        baseUsd,
      );

      // –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
      await bot.exchange.placeMarket?.(
        symbolId,
        'buy',
        String(size),
        `${bot.name}-trend-${Date.now()}`,
      );

      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
      const position = await this.store.open(
        bot.name,
        symbol,
        price,
        String(baseUsd),
      );

      await bot.notify(
        `‚úÖ ${bot.name}: TREND ENTRY ${symbol} –Ω–∞ ${timeframe}\n` +
          `üí∞ –†–∞–∑–º–µ—Ä: $${baseUsd}\n` +
          `üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${this.getTrendDirection(this.calculateTotalTrendCounts(this.getOrCreateTrendState(bot.name, symbol, timeframe)))}`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é ${symbol}: ${error.message}`,
      );
      await bot.notify(
        `‚ùå ${bot.name}: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é ${symbol}: ${error.message}`,
      );
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
  private async exitPosition(
    bot: any,
    symbol: string,
    position: any,
  ): Promise<void> {
    try {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
      await bot.exchange.flashClose?.(symbol, 'long');

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
      await this.store.close(position, '0');

      await bot.notify(
        `üõë ${bot.name}: TREND EXIT ${symbol}\n` +
          `üìä –¢—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è - –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ ${symbol}: ${error.message}`,
      );
      await bot.notify(
        `‚ùå ${bot.name}: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ ${symbol}: ${error.message}`,
      );
    }
  }

  // –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Strategy (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
  async onOpen(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onAdd(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onClose(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBigClose(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBigAdd(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onSmartVolumeOpen(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBullishVolume(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onVolumeUp(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è ThreeAlerts —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ TrendPivot)
  async onBullRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBullMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBullPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBearPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }
}
