import { Strategy } from '../interfaces';
import { toBitgetSymbolId } from '../utils';
import { PositionsStore } from '../positions.store';
import { Logger, Inject } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import {
  TrendConfirmationEntity,
  TrendDirection,
} from '../../entities/trend-confirmation.entity';

export class TrendPivotStrategy implements Strategy {
  private readonly logger = new Logger(TrendPivotStrategy.name);

  constructor(
    @InjectRepository(TrendConfirmationEntity)
    private readonly trendRepo: Repository<TrendConfirmationEntity>,
    private readonly store: PositionsStore,
  ) {}

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –≤ –ë–î (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ)
  private async saveTrendConfirmation(
    symbol: string,
    timeframe: string,
    direction: TrendDirection,
    source: string,
    meta?: any,
  ): Promise<void> {
    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
      await this.trendRepo.delete({ symbol, timeframe });

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const confirmation = this.trendRepo.create({
        symbol,
        timeframe,
        direction,
        source,
        meta,
        expiresAt: new Date('2030-12-31T23:59:59Z'), // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª–µ–∫—É—é –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º
      });

      await this.trendRepo.save(confirmation);
      this.logger.log(
        `üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞: ${direction} –¥–ª—è ${symbol} –Ω–∞ ${timeframe}`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞: ${error.message}`,
      );
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
  private async getTrendConfirmationCount(
    symbol: string,
    timeframe: string,
    direction: TrendDirection,
  ): Promise<number> {
    try {
      const confirmations = await this.trendRepo.find({
        where: { symbol, timeframe, direction },
      });
      return confirmations.length;
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: ${error.message}`,
      );
      return 0;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –∏–∑ –ë–î
  private async getCurrentTrendDirection(
    symbol: string,
    timeframe: string,
  ): Promise<TrendDirection | null> {
    try {
      const confirmation = await this.trendRepo.findOne({
        where: { symbol, timeframe },
        order: { createdAt: 'DESC' },
      });
      return confirmation?.direction || null;
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞: ${error.message}`,
      );
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤–æ–π—Ç–∏ –≤ –ø–æ–∑–∏—Ü–∏—é
  private async canEnterPosition(
    bot: any,
    symbol: string,
    timeframe: string,
  ): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤
      const timeframeDirection = await this.getCurrentTrendDirection(
        symbol,
        timeframe,
      );
      const fourHourDirection = await this.getCurrentTrendDirection(
        symbol,
        '4h',
      );

      // –í—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
      // 1. –ï—Å—Ç—å 4—á —Ç—Ä–µ–Ω–¥ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
      // 2. –ò –ø—Ä–∏—à–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ 15–º/1—á –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
      // 3. –ò –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç
      return !!(
        fourHourDirection && // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 4—á —Ç—Ä–µ–Ω–¥
        timeframeDirection && // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ 15–º/1—á
        timeframeDirection === fourHourDirection // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
      );
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é: ${error.message}`);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
  private async shouldExitPosition(
    bot: any,
    symbol: string,
    timeframe: string,
    position: any,
  ): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      const originalDirection = position.meta?.originalDirection || 'long';

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π 4—á —Ç—Ä–µ–Ω–¥
      const fourHourDirection = await this.getCurrentTrendDirection(
        symbol,
        '4h',
      );

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥ –Ω–∞ 15–º/1—á
      const timeframeDirection = await this.getCurrentTrendDirection(
        symbol,
        timeframe,
      );

      // –í—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏:
      // 1. 4—á —Ç—Ä–µ–Ω–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π (–∑–∞–∫—Ä—ã–≤–∞–µ–º –í–°–Æ –ø–æ–∑–∏—Ü–∏—é)
      // 2. –ò–õ–ò 15–º/1—á —Ç—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π (—á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
      return !!(
        (fourHourDirection && fourHourDirection !== originalDirection) || // 4—á —Ä–∞–∑–≤–æ—Ä–æ—Ç
        (timeframeDirection && timeframeDirection !== originalDirection) // 15–º/1—á —Ä–∞–∑–≤–æ—Ä–æ—Ç
      );
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: ${error.message}`,
      );
      return false;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ long trend –∞–ª–µ—Ä—Ç–∞
  async onLongTrend(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üìà Long Trend –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await this.saveTrendConfirmation(alert.symbol, timeframe, 'long', 'trend', {
      type: 'trend',
      botName: bot.name,
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
    if (timeframe === '4h') {
      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ short trend –∞–ª–µ—Ä—Ç–∞
  async onShortTrend(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üìâ Short Trend –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await this.saveTrendConfirmation(
      alert.symbol,
      timeframe,
      'short',
      'trend',
      { type: 'trend', botName: bot.name },
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
    if (timeframe === '4h') {
      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ long pivot point –∞–ª–µ—Ä—Ç–∞
  async onLongPivotPoint(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üìä Long Pivot Point –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await this.saveTrendConfirmation(alert.symbol, timeframe, 'long', 'pivot', {
      type: 'pivot',
      botName: bot.name,
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
    if (timeframe === '4h') {
      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ short pivot point –∞–ª–µ—Ä—Ç–∞
  async onShortPivotPoint(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üìä Short Pivot Point –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await this.saveTrendConfirmation(
      alert.symbol,
      timeframe,
      'short',
      'pivot',
      { type: 'pivot', botName: bot.name },
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
    if (timeframe === '4h') {
      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ strong long pivot point –∞–ª–µ—Ä—Ç–∞
  async onStrongLongPivotPoint(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üöÄ Strong Long Pivot Point –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await this.saveTrendConfirmation(
      alert.symbol,
      timeframe,
      'long',
      'strong-pivot',
      { type: 'strong-pivot', botName: bot.name },
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
    if (timeframe === '4h') {
      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ strong short pivot point –∞–ª–µ—Ä—Ç–∞
  async onStrongShortPivotPoint(bot: any, alert: any): Promise<void> {
    const timeframe = alert.timeframe || '15m';
    this.logger.log(
      `üöÄ Strong Short Pivot Point –¥–ª—è ${alert.symbol} –Ω–∞ ${timeframe} (${bot.name})`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await this.saveTrendConfirmation(
      alert.symbol,
      timeframe,
      'short',
      'strong-pivot',
      { type: 'strong-pivot', botName: bot.name },
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
    if (timeframe === '4h') {
      await this.processFourHourTrendChange(bot, alert.symbol);
    } else {
      await this.processTrendChange(bot, alert.symbol, timeframe);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è 15m/1h
  private async processTrendChange(
    bot: any,
    symbol: string,
    timeframe: string,
  ): Promise<void> {
    try {
      const existing = await this.store.findOpen(bot.name, symbol);

      if (existing) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 4—á —Ç—Ä–µ–Ω–¥–∞)
        if (await this.shouldExitPosition(bot, symbol, timeframe, existing)) {
          this.logger.log(
            `üîÑ 4—á —Ç—Ä–µ–Ω–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –¥–ª—è ${symbol} - –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–∑–∏—Ü–∏–∏`,
          );
          await this.exitPosition(bot, symbol, existing, timeframe);
        }
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤–æ–π—Ç–∏ –≤ –ø–æ–∑–∏—Ü–∏—é
        // (–Ω—É–∂–µ–Ω 4—á —Ç—Ä–µ–Ω–¥ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ 15–º/1—á –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏)
        if (await this.canEnterPosition(bot, symbol, timeframe)) {
          this.logger.log(
            `‚úÖ 4—á —Ç—Ä–µ–Ω–¥ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ ${timeframe} —Å–æ–≤–ø–∞–¥–∞—é—Ç - –≤—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é`,
          );
          await this.enterPosition(bot, symbol, timeframe);
        }
      }
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ processTrendChange: ${error.message}`);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è 4h —Ç—Ä–µ–Ω–¥–∞
  private async processFourHourTrendChange(
    bot: any,
    symbol: string,
  ): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –±–æ—Ç–∞
    const timeframes = ['15m', '1h'];

    for (const timeframe of timeframes) {
      await this.processTrendChange(bot, symbol, timeframe);
    }
  }

  // –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é
  private async enterPosition(
    bot: any,
    symbol: string,
    timeframe: string,
  ): Promise<void> {
    try {
      const existing = await this.store.findOpen(bot.name, symbol);
      if (existing) {
        this.logger.log(`‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è ${bot.name}`);
        return;
      }

      const symbolId = toBitgetSymbolId(symbol);
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      let currentPrice = '0';
      try {
        const ticker = await bot.exchange.getTicker?.(symbolId);
        currentPrice = ticker?.last || '0';
      } catch (error) {
        this.logger.warn(
          `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è ${symbol}: ${error.message}`,
        );
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
      if (bot.cfg.smartvol?.leverage) {
        await bot.exchange.ensureLeverage?.(
          symbolId,
          String(bot.cfg.smartvol.leverage),
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const baseUsd = bot.cfg.smartvol?.baseUsd || 200;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
      const size = await bot.exchange.calcSizeFromUsd?.(
        symbolId,
        0, // –¶–µ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
        baseUsd,
      );

      // –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
      await bot.exchange.placeMarket?.(
        symbolId,
        'buy',
        String(size),
        `${bot.name}-trend-${Date.now()}`,
      );

      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
      const position = await this.store.open(
        bot.name,
        symbol,
        currentPrice,
        String(baseUsd),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –≤ meta –ø–æ–∑–∏—Ü–∏–∏
      position.meta = position.meta || {};
      position.meta.originalDirection = await this.getCurrentTrendDirection(
        symbol,
        timeframe,
      );
      await this.store.updatePosition(position);

      await bot.notify(
        `‚úÖ ${bot.name}: TREND ENTRY ${symbol} –Ω–∞ ${timeframe}\n` +
          `üí∞ –†–∞–∑–º–µ—Ä: $${baseUsd}\n` +
          `üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: $${currentPrice}\n` +
          `üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${await this.getCurrentTrendDirection(symbol, timeframe)}`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é ${symbol}: ${error.message}`,
      );
      await bot.notify(
        `‚ùå ${bot.name}: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é ${symbol}: ${error.message}`,
      );
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º
  private async exitPosition(
    bot: any,
    symbol: string,
    position: any,
    timeframe: string,
  ): Promise<void> {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –ª–æ–≥–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
      const originalDirection = position.meta?.originalDirection || 'long';
      const fourHourDirection = await this.getCurrentTrendDirection(
        symbol,
        '4h',
      );
      const timeframeDirection = await this.getCurrentTrendDirection(
        symbol,
        timeframe,
      );

      let closePercentage = 100; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
      let isFourHourReversal = false; // –§–ª–∞–≥ –¥–ª—è 4—á —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
      let confirmationCount = 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
      if (fourHourDirection && fourHourDirection !== originalDirection) {
        // 4—á —Ä–∞–∑–≤–æ—Ä–æ—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º –í–°–Æ –ø–æ–∑–∏—Ü–∏—é
        isFourHourReversal = true;
        closePercentage = 100;
        this.logger.log(
          `üîÑ 4—á —Ç—Ä–µ–Ω–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è —Å ${originalDirection} –Ω–∞ ${fourHourDirection} - –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é`,
        );
      } else if (
        timeframeDirection &&
        timeframeDirection !== originalDirection
      ) {
        // 15–º/1—á —Ä–∞–∑–≤–æ—Ä–æ—Ç - —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        const confirmationCount = await this.getTrendConfirmationCount(
          symbol,
          timeframe,
          originalDirection,
        );

        if (confirmationCount === 1) {
          closePercentage = 100; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
        } else if (confirmationCount === 2) {
          closePercentage = 50; // –ó–∞–∫—Ä—ã–≤–∞–µ–º 50%
        } else if (confirmationCount >= 3) {
          closePercentage = 33; // –ó–∞–∫—Ä—ã–≤–∞–µ–º 33%
        }

        this.logger.log(
          `üîÑ ${timeframe} —Ç—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${originalDirection} –Ω–∞ ${timeframeDirection} - –∑–∞–∫—Ä—ã–≤–∞–µ–º ${closePercentage}% –ø–æ–∑–∏—Ü–∏–∏ (${confirmationCount} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)`,
        );
      }

      if (closePercentage === 100) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
        await bot.exchange.flashClose?.(symbol, 'long');
        await this.store.close(position, '0');

        await bot.notify(
          `üõë ${bot.name}: TREND EXIT ${symbol}\n` +
            `üìä ${isFourHourReversal ? '4—á —Ç—Ä–µ–Ω–¥ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è' : `${timeframe} —Ç—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è`} - –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞`,
        );
      } else {
        // –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        const currentAmount = parseFloat(position.amountUsd);
        const closeAmount = (currentAmount * closePercentage) / 100;

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
        try {
          await bot.exchange.flashClose?.(
            symbol,
            'long',
            closeAmount.toString(),
          );
        } catch (error) {
          this.logger.warn(
            `‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é: ${error.message}`,
          );
          await bot.exchange.flashClose?.(symbol, 'long');
          await this.store.close(position, '0');
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
        position.amountUsd = (currentAmount - closeAmount).toString();
        position.meta = position.meta || {};
        position.meta.closedConfirmations =
          (position.meta.closedConfirmations || 0) + 1;
        await this.store.updatePosition(position);

        await bot.notify(
          `üîÑ ${bot.name}: PARTIAL TREND EXIT ${symbol}\n` +
            `üìä –ó–∞–∫—Ä—ã—Ç–æ ${closePercentage}% –ø–æ–∑–∏—Ü–∏–∏ (${confirmationCount} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)\n` +
            `üí∞ –û—Å—Ç–∞—Ç–æ–∫: $${(currentAmount - closeAmount).toFixed(2)}`,
        );
      }
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ ${symbol}: ${error.message}`,
      );
      await bot.notify(
        `‚ùå ${bot.name}: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ ${symbol}: ${error.message}`,
      );
    }
  }

  // –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Strategy (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
  async onOpen(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onAdd(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onClose(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBigClose(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBigAdd(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onSmartVolumeOpen(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBullishVolume(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onVolumeUp(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è ThreeAlerts —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ TrendPivot)
  async onBullRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBullMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBullPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBearPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }
}
