import { Strategy } from '../interfaces';
import { toBitgetSymbolId } from '../utils';
import { PositionsStore } from '../positions.store';
import { VolumeUpService } from '../../services/volume-up.service';
import { Logger } from '@nestjs/common';

// In-memory —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è SmartVolClose —Å–∏–≥–Ω–∞–ª–æ–≤
interface PartialCloseState {
  symbol: string;
  botName: string;
  smartVolCloseCount: number;
  lastUpdate: number;
}

export class SmartVolPartialCloseStrategy implements Strategy {
  private readonly logger = new Logger(SmartVolPartialCloseStrategy.name);

  // In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
  private partialCloseStates = new Map<string, PartialCloseState>();

  constructor(
    private readonly store: PositionsStore,
    private readonly volumeUpService: VolumeUpService,
  ) {}

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  private getStateKey(botName: string, symbol: string): string {
    return `${botName}:${symbol}`;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  private getOrCreateState(botName: string, symbol: string): PartialCloseState {
    const key = this.getStateKey(botName, symbol);
    let state = this.partialCloseStates.get(key);

    if (!state) {
      state = {
        symbol,
        botName,
        smartVolCloseCount: 0,
        lastUpdate: Date.now(),
      };
      this.partialCloseStates.set(key, state);
    }

    return state;
  }

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
  private clearState(botName: string, symbol: string): void {
    const key = this.getStateKey(botName, symbol);
    this.partialCloseStates.delete(key);
  }

  async onOpen(bot, alert) {
    this.logger.log(`üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è onOpen –¥–ª—è ${alert.symbol} @${alert.price}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏ 1h
    const timeframe = alert.timeframe || '1h';
    if (timeframe !== '1h') {
      this.logger.log(
        `‚è∏ SmartOpen —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º ${timeframe} - –ø—Ä–æ–ø—É—Å–∫–∞—é (–Ω—É–∂–µ–Ω 1h)`,
      );
      await bot.notify(
        `‚è∏ ${bot.name}: SmartOpen —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º ${timeframe} –ø—Ä–æ–ø—É—â–µ–Ω - –Ω—É–∂–µ–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º 1h –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏`,
      );
      return;
    }

    this.logger.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ${alert.symbol}`);
    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (existing) {
      this.logger.log(
        `üìä –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${existing.fillsCount}/${bot.cfg.maxFills ?? 4} –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π`,
      );
      if (existing.fillsCount >= (bot.cfg.maxFills ?? 4)) {
        this.logger.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π`);
        await bot.notify(
          `‚ö†Ô∏è ${bot.name}: max fills reached for ${alert.symbol}`,
        );
        return;
      }
      this.logger.log(`‚ûï –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–∫—É–ø–∫–µ`);
      return this.onAdd(bot, alert);
    }
    this.logger.log(`üÜï –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞—é –Ω–æ–≤—É—é`);

    const symbolId = toBitgetSymbolId(alert.symbol);
    this.logger.log(`üîß –°–∏–º–≤–æ–ª –¥–ª—è –±–∏—Ä–∂–∏: ${symbolId}`);

    if (bot.exchange.isAllowed && !bot.exchange.isAllowed(symbolId)) {
      this.logger.log(`‚ùå –°–∏–º–≤–æ–ª ${symbolId} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω`);
      await bot.notify(`‚ö†Ô∏è ${bot.name}: ${symbolId} not allowed`);
      return;
    }
    this.logger.log(`‚úÖ –°–∏–º–≤–æ–ª ${symbolId} —Ä–∞–∑—Ä–µ—à–µ–Ω`);
    this.logger.log(`‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–ª–µ—á–æ: ${bot.cfg.smartvol.leverage}`);
    await bot.exchange.ensureLeverage?.(
      symbolId,
      String(bot.cfg.smartvol.leverage),
    );

    this.logger.log(`üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è $${bot.baseUsd()}`);
    const size = await bot.exchange.calcSizeFromUsd?.(
      symbolId,
      Number(alert.price),
      bot.baseUsd(),
    );
    this.logger.log(`üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${size}`);

    this.logger.log(`üìà –†–∞–∑–º–µ—â–∞—é —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä`);
    await bot.exchange.placeMarket?.(
      symbolId,
      'buy',
      String(size),
      `${bot.name}-open-${Date.now()}`,
    );
    const baseUsd = bot.baseUsd();
    if (!baseUsd || isNaN(baseUsd)) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞: baseUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: ${baseUsd}`,
      );
      await bot.notify(
        `‚ùå ${bot.name}: –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - baseUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`,
      );
      return;
    }

    this.logger.log(
      `üíæ –°–æ–∑–¥–∞—é –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î: ${bot.name}, ${alert.symbol}, ${alert.price}, $${baseUsd}`,
    );
    const position = await this.store.open(
      bot.name,
      alert.symbol,
      alert.price,
      String(baseUsd),
    );
    this.logger.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î —Å ID: ${position.id}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    this.getOrCreateState(bot.name, alert.symbol);

    const positionInfo = this.store.getPositionInfo(
      position,
      Number(alert.price),
    );

    await bot.notify(
      `‚úÖ ${bot.name}: OPEN ${alert.symbol} @${alert.price} $${baseUsd}\n` +
        `üìä –†–∞–∑–º–µ—Ä: ${positionInfo.pnl?.totalSize || '0'} ${alert.symbol.replace('USDT', '')}\n` +
        `üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: $${positionInfo.pnl?.avgEntryPrice || alert.price}\n` +
        `üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${positionInfo.pnl?.currentPrice || alert.price}\n` +
        `üíµ PnL: $${positionInfo.pnl?.pnl || '0'} (${positionInfo.pnl?.pnlPercent || '0'}%)`,
    );
  }

  async onAdd(bot, alert) {
    this.logger.log(`‚ûï –°—Ç—Ä–∞—Ç–µ–≥–∏—è onAdd –¥–ª—è ${alert.symbol} @${alert.price}`);

    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (!existing) {
      this.logger.log(
        `‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${alert.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î –¥–ª—è –±–æ—Ç–∞ ${bot.name}, –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ–∫—É–ø–∫—É`,
      );
      return;
    }

    if (existing.fillsCount >= (bot.cfg.maxFills ?? 4)) {
      await bot.notify(`‚ö†Ô∏è ${bot.name}: max fills reached for ${alert.symbol}`);
      return;
    }

    const addUsd = bot.addUsd();
    if (!addUsd || isNaN(addUsd)) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞: addUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: ${addUsd}`,
      );
      await bot.notify(
        `‚ùå ${bot.name}: –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - addUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`,
      );
      return;
    }

    const symbolId = toBitgetSymbolId(alert.symbol);
    const size = await bot.exchange.calcSizeFromUsd?.(
      symbolId,
      Number(alert.price),
      addUsd,
    );
    await bot.exchange.placeMarket?.(
      symbolId,
      'buy',
      String(size),
      `${bot.name}-add-${Date.now()}`,
    );
    await this.store.add(existing, alert.price, String(addUsd));

    const updatedPosition = await this.store.findOpen(bot.name, alert.symbol);
    if (updatedPosition) {
      const positionInfo = this.store.getPositionInfo(
        updatedPosition,
        Number(alert.price),
      );

      await bot.notify(
        `‚ûï ${bot.name}: ADD ${alert.symbol} @${alert.price} $${addUsd}\n` +
          `üìä –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${positionInfo.pnl?.totalSize || '0'} ${alert.symbol.replace('USDT', '')}\n` +
          `üí∞ –ù–æ–≤–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: $${positionInfo.pnl?.avgEntryPrice || alert.price}\n` +
          `üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${positionInfo.pnl?.currentPrice || alert.price}\n` +
          `üíµ PnL: $${positionInfo.pnl?.pnl || '0'} (${positionInfo.pnl?.pnlPercent || '0'}%)`,
      );
    } else {
      await bot.notify(
        `‚ûï ${bot.name}: ADD ${alert.symbol} @${alert.price} $${addUsd}`,
      );
    }
  }

  async onClose(bot, alert) {
    this.logger.log(
      `üîÑ SmartClose (${alert.timeframe || '1h'}) –¥–ª—è ${alert.symbol}`,
    );

    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (!existing) {
      this.logger.log(
        `‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${alert.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î –¥–ª—è –±–æ—Ç–∞ ${bot.name}, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–∫—Ä—ã—Ç–∏–µ`,
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º
    const timeframe = alert.timeframe || '1h';

    if (timeframe === '4h') {
      // 4h SmartClose - –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é —Å—Ä–∞–∑—É
      this.logger.log(
        `üõë 4h SmartClose - –∑–∞–∫—Ä—ã–≤–∞—é –≤—Å—é –ø–æ–∑–∏—Ü–∏—é ${alert.symbol}`,
      );

      try {
        await bot.exchange.flashClose?.(alert.symbol, 'long');
        const finalPnL = this.store.calculatePnL(existing, Number(alert.price));
        await this.store.close(existing, alert.price);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        this.clearState(bot.name, alert.symbol);

        await bot.notify(
          `üõë ${bot.name}: CLOSE 4h ${alert.symbol} @${alert.price}\n` +
            `üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${finalPnL.totalSize} ${alert.symbol.replace('USDT', '')}\n` +
            `üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: $${finalPnL.avgEntryPrice}\n` +
            `üìà –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: $${finalPnL.currentPrice}\n` +
            `üíµ –§–∏–Ω–∞–ª—å–Ω—ã–π PnL: $${finalPnL.pnl} (${finalPnL.pnlPercent}%)`,
        );
      } catch (error) {
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ ${alert.symbol}: ${error.message}`,
        );
        throw error;
      }
      return;
    }

    // 1h SmartClose - –ª–æ–≥–∏–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    const state = this.getOrCreateState(bot.name, alert.symbol);
    const currentCount = state.smartVolCloseCount;

    if (currentCount === 0) {
      // –ü–µ—Ä–≤—ã–π SmartClose - —Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      this.logger.log(
        `üìä –ü–µ—Ä–≤—ã–π SmartClose –¥–ª—è ${alert.symbol} - —É–≤–µ–ª–∏—á–∏–≤–∞—é —Å—á–µ—Ç—á–∏–∫`,
      );
      state.smartVolCloseCount = 1;
      state.lastUpdate = Date.now();

      await bot.notify(
        `‚è≥ ${bot.name}: –ü–µ—Ä–≤—ã–π SmartClose –¥–ª—è ${alert.symbol} - –æ–∂–∏–¥–∞—é –≤—Ç–æ—Ä–æ–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è`,
      );
      return;
    } else if (currentCount === 1) {
      // –í—Ç–æ—Ä–æ–π SmartClose - –∑–∞–∫—Ä—ã–≤–∞–µ–º 50%
      this.logger.log(
        `üîÑ –í—Ç–æ—Ä–æ–π SmartClose –¥–ª—è ${alert.symbol} - –∑–∞–∫—Ä—ã–≤–∞—é 50%`,
      );

      try {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º 50% –ø–æ–∑–∏—Ü–∏–∏
        const currentSize = parseFloat(existing.amountUsd);
        const closeSize = currentSize * 0.5;

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ —Ç–æ–∫–µ–Ω–∞—Ö –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        const avgPrice = parseFloat(existing.avgEntryPrice);
        const closeTokens = closeSize / avgPrice;

        await bot.exchange.placeMarket?.(
          toBitgetSymbolId(alert.symbol),
          'sell',
          closeTokens.toFixed(8),
          `${bot.name}-partial-close-${Date.now()}`,
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.smartVolCloseCount = 2;
        state.lastUpdate = Date.now();

        await bot.notify(
          `üîÑ ${bot.name}: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ 50% ${alert.symbol} @${alert.price}\n` +
            `üìä –ó–∞–∫—Ä—ã—Ç–æ: $${closeSize.toFixed(2)}\n` +
            `üìä –û—Å—Ç–∞–ª–æ—Å—å: $${(currentSize - closeSize).toFixed(2)}`,
        );
      } catch (error) {
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ ${alert.symbol}: ${error.message}`,
        );
        throw error;
      }
    } else if (currentCount >= 2) {
      // –¢—Ä–µ—Ç–∏–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ SmartClose - –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
      this.logger.log(
        `üõë ${currentCount + 1}-–π SmartClose –¥–ª—è ${alert.symbol} - –∑–∞–∫—Ä—ã–≤–∞—é –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å`,
      );

      try {
        await bot.exchange.flashClose?.(alert.symbol, 'long');
        const finalPnL = this.store.calculatePnL(existing, Number(alert.price));
        await this.store.close(existing, alert.price);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        this.clearState(bot.name, alert.symbol);

        await bot.notify(
          `üõë ${bot.name}: –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ ${alert.symbol} @${alert.price}\n` +
            `üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${finalPnL.totalSize} ${alert.symbol.replace('USDT', '')}\n` +
            `üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: $${finalPnL.avgEntryPrice}\n` +
            `üìà –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: $${finalPnL.currentPrice}\n` +
            `üíµ –§–∏–Ω–∞–ª—å–Ω—ã–π PnL: $${finalPnL.pnl} (${finalPnL.pnlPercent}%)`,
        );
      } catch (error) {
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ ${alert.symbol}: ${error.message}`,
        );
        throw error;
      }
    }
  }

  async onBigClose(bot, alert) {
    this.logger.log(
      `üö® SmartBigClose –¥–ª—è ${alert.symbol} - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–π –ø–æ–∑–∏—Ü–∏–∏`,
    );

    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (!existing) {
      this.logger.log(
        `‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${alert.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î –¥–ª—è –±–æ—Ç–∞ ${bot.name}, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–∫—Ä—ã—Ç–∏–µ`,
      );
      return;
    }

    try {
      await bot.exchange.flashClose?.(alert.symbol, 'long');
      const finalPnL = this.store.calculatePnL(existing, Number(alert.price));
      await this.store.close(existing, alert.price);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
      this.clearState(bot.name, alert.symbol);

      await bot.notify(
        `üö® ${bot.name}: BIG CLOSE ${alert.symbol} @${alert.price}\n` +
          `üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${finalPnL.totalSize} ${alert.symbol.replace('USDT', '')}\n` +
          `üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: $${finalPnL.avgEntryPrice}\n` +
          `üìà –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: $${finalPnL.currentPrice}\n` +
          `üíµ –§–∏–Ω–∞–ª—å–Ω—ã–π PnL: $${finalPnL.pnl} (${finalPnL.pnlPercent}%)`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ ${alert.symbol}: ${error.message}`,
      );
      throw error;
    }
  }

  async onBigAdd(bot, alert) {
    this.logger.log(`üöÄ SmartBigAdd –¥–ª—è ${alert.symbol} - –±–æ–ª—å—à–∞—è –¥–æ–∫—É–ø–∫–∞`);

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è SmartBigAdd (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    await bot.notify(
      `üöÄ ${bot.name}: BIG ADD —Å–∏–≥–Ω–∞–ª –¥–ª—è ${alert.symbol} @${alert.price}`,
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è SmartVolumeOpen (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
  async onSmartVolumeOpen(bot, alert) {
    this.logger.log(
      `üìä SmartVolumeOpen –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏`,
    );
    // –ú–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è BullishVolume (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
  async onBullishVolume(bot, alert) {
    this.logger.log(
      `üêÇ BullishVolume –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏`,
    );
    // –ú–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è VolumeUp (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
  async onVolumeUp(bot, alert) {
    this.logger.log(`üìä VolumeUp –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏`);
    // –ú–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è TrendPivot —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ SmartVol Partial Close)
  async onLongTrend(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onShortTrend(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onLongPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onShortPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onStrongLongPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onStrongShortPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è ThreeAlerts —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ SmartVol Partial Close)
  async onBullRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBullMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBullPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBearPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVol Partial Close —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }
}
