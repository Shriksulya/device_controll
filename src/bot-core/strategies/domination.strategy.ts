import {
  Injectable,
  Logger,
  OnModuleInit,
  OnModuleDestroy,
} from '@nestjs/common';
import { Strategy } from '../interfaces';
import { PositionsStore } from '../positions.store';
import { TelegramService } from '../../services/telegram.service';

export interface DominationPosition {
  id: string;
  botName: string;
  symbol: string;
  side: 'long' | 'short';
  entryPrice: string;
  entryTime: Date;
  lastContinuation: Date;
  status: 'open' | 'closed';
}

@Injectable()
export class DominationStrategy
  implements Strategy, OnModuleInit, OnModuleDestroy
{
  private readonly logger = new Logger(DominationStrategy.name);
  private continuationCheckInterval: NodeJS.Timeout;

  onModuleInit() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É continuation –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.continuationCheckInterval = setInterval(
      () => {
        this.checkContinuationTimeouts();
      },
      5 * 60 * 1000,
    ); // 5 –º–∏–Ω—É—Ç
  }

  onModuleDestroy() {
    if (this.continuationCheckInterval) {
      clearInterval(this.continuationCheckInterval);
    }
  }

  constructor(
    private readonly store: PositionsStore,
    private readonly telegramService: TelegramService,
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã continuation (30 –º–∏–Ω—É—Ç)
   */
  private async checkContinuationTimeouts(): Promise<void> {
    this.logger.debug(
      'üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∞–π–º–∞—É—Ç—ã continuation –¥–ª—è Domination –ø–æ–∑–∏—Ü–∏–π',
    );

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ë–î
    const openPositions = await this.store.getAllOpenPositions();

    for (const position of openPositions) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ Domination –ø–æ–∑–∏—Ü–∏–∏ –ø–æ meta.type
      if (position.meta?.type === 'domination') {
        const now = new Date();
        const lastUpdate = position.meta?.lastContinuation || position.openedAt;
        if (lastUpdate) {
          const timeSinceLastUpdate =
            now.getTime() - new Date(lastUpdate).getTime();
          const timeoutMs = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

          if (timeSinceLastUpdate > timeoutMs) {
            this.logger.log(
              `‚è∞ Continuation timeout –¥–ª—è ${position.symbol} (${position.botName}) - –∑–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é`,
            );
            await this.closePosition(position, 'Continuation timeout');
          }
        }
      }
    }
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (Buyer Domination)
   */
  async onBuyerDomination(bot: any, alert: any): Promise<void> {
    this.logger.log(
      `üöÄ –û—Ç–∫—Ä—ã–≤–∞—é LONG –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ${alert.symbol} (${bot.name})`,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (existing) {
      this.logger.log(
        `‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${alert.symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è ${bot.name}, –ø—Ä–æ–ø—É—Å–∫–∞—é`,
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
    const position = await this.store.open(
      bot.name,
      alert.symbol,
      alert.price,
      '200', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è Domination
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è Domination –≤ meta
    position.meta = {
      type: 'domination',
      side: 'long',
      lastContinuation: new Date(),
    };
    await this.store.updatePosition(position);

    this.logger.log(`‚úÖ LONG –ø–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î —Å ID: ${position.id}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.notify(
      `üü¢ ${bot.name}: LONG ${alert.symbol} @${alert.price}\n` +
        `üí∞ –†–∞–∑–º–µ—Ä: $200\n` +
        `üìÖ –í—Ö–æ–¥: ${position.openedAt?.toLocaleString() || 'N/A'}\n` +
        `üí° –û–∂–∏–¥–∞—é continuation –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç`,
    );
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é (Seller Domination)
   */
  async onSellerDomination(bot: any, alert: any): Promise<void> {
    this.logger.log(
      `üî¥ –û—Ç–∫—Ä—ã–≤–∞—é SHORT –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ${alert.symbol} (${bot.name})`,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (existing) {
      this.logger.log(
        `‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${alert.symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è ${bot.name}, –ø—Ä–æ–ø—É—Å–∫–∞—é`,
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
    const position = await this.store.open(
      bot.name,
      alert.symbol,
      alert.price,
      '200', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è Domination
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è Domination –≤ meta
    position.meta = {
      type: 'domination',
      side: 'short',
      lastContinuation: new Date(),
    };
    await this.store.updatePosition(position);

    this.logger.log(`‚úÖ SHORT –ø–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î —Å ID: ${position.id}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.notify(
      `üî¥ ${bot.name}: SHORT ${alert.symbol} @${alert.price}\n` +
        `üí∞ –†–∞–∑–º–µ—Ä: $200\n` +
        `üìÖ –í—Ö–æ–¥: ${position.openedAt?.toLocaleString() || 'N/A'}\n` +
        `üí° –û–∂–∏–¥–∞—é continuation –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç`,
    );
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç continuation –¥–ª—è –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  async onBuyerContinuation(bot: any, alert: any): Promise<void> {
    this.logger.log(`üìà Buyer continuation –¥–ª—è ${alert.symbol} (${bot.name})`);

    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (
      !existing ||
      existing.meta?.type !== 'domination' ||
      existing.meta?.side !== 'long'
    ) {
      this.logger.log(
        `‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π LONG Domination –ø–æ–∑–∏—Ü–∏–∏ ${alert.symbol} –¥–ª—è ${bot.name}`,
      );
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ continuation
    existing.meta.lastContinuation = new Date();
    await this.store.updatePosition(existing);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.notify(
      `üìà ${bot.name}: Buyer continuation ${alert.symbol} @${alert.price}\n` +
        `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${existing.meta.lastContinuation.toLocaleString()}\n` +
        `‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç`,
    );
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç continuation –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  async onSellerContinuation(bot: any, alert: any): Promise<void> {
    this.logger.log(`üìâ Seller continuation –¥–ª—è ${alert.symbol} (${bot.name})`);

    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (
      !existing ||
      existing.meta?.type !== 'domination' ||
      existing.meta?.side !== 'short'
    ) {
      this.logger.log(
        `‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π SHORT Domination –ø–æ–∑–∏—Ü–∏–∏ ${alert.symbol} –¥–ª—è ${bot.name}`,
      );
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ continuation
    existing.meta.lastContinuation = new Date();
    await this.store.updatePosition(existing);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.notify(
      `üìâ ${bot.name}: Seller continuation ${alert.symbol} @${alert.price}\n` +
        `‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${existing.meta.lastContinuation.toLocaleString()}\n` +
        `‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç`,
    );
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é
   */
  private async closePosition(
    position: any,
    reason: string,
    bot?: any,
  ): Promise<void> {
    this.logger.log(
      `üõë –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é ${position.symbol} (${position.botName}): ${reason}`,
    );

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
    await this.store.close(position, position.avgEntryPrice);

    const exitTime = new Date();
    const duration = this.calculateDuration(position.openedAt, exitTime);

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    this.logger.log(
      `‚úÖ ${position.botName}: ${position.meta?.side?.toUpperCase() || 'UNKNOWN'} ${position.symbol} –ó–ê–ö–†–´–¢–ê\n` +
        `üí∞ –í—Ö–æ–¥: $${position.avgEntryPrice}\n` +
        `üìÖ –í—Ö–æ–¥: ${position.openedAt?.toLocaleString() || 'N/A'}\n` +
        `üìÖ –í—ã—Ö–æ–¥: ${exitTime.toLocaleString()}\n` +
        `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}\n` +
        `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
    try {
      const sideEmoji = position.meta?.side === 'long' ? 'üü¢' : 'üî¥';
      const sideText = position.meta?.side === 'long' ? 'LONG' : 'SHORT';

      const message =
        `${sideEmoji} ${position.botName}: ${sideText} ${position.symbol} –ó–ê–ö–†–´–¢–ê\n` +
        `üí∞ –í—Ö–æ–¥: $${position.avgEntryPrice}\n` +
        `üìÖ –í—Ö–æ–¥: ${position.openedAt?.toLocaleString() || 'N/A'}\n` +
        `üìÖ –í—ã—Ö–æ–¥: ${exitTime.toLocaleString()}\n` +
        `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}\n` +
        `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;

      if (bot && bot.notify) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await bot.notify(message);
      } else {
        // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ TelegramService
        await this.telegramService.sendMessage(message, 'domination');
      }
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ: ${error.message}`,
      );
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
   */
  private calculateDuration(entryTime: Date | null, exitTime: Date): string {
    if (!entryTime) return 'N/A';

    const diffMs = exitTime.getTime() - entryTime.getTime();
    const hours = Math.floor(diffMs / (1000 * 60 * 60));
    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));

    if (hours > 0) {
      return `${hours}—á ${minutes}–º`;
    }
    return `${minutes}–º`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ Domination –ø–æ–∑–∏—Ü–∏–∏
   */
  async getAllOpenPositions(): Promise<any[]> {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ë–î
    const openPositions = await this.store.getAllOpenPositions();

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Domination –ø–æ–∑–∏—Ü–∏–∏
    return openPositions.filter((pos) => pos.meta?.type === 'domination');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ –±–æ—Ç—É –∏ —Å–∏–º–≤–æ–ª—É
   */
  async getPosition(botName: string, symbol: string): Promise<any | null> {
    const position = await this.store.findOpen(botName, symbol);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ Domination –ø–æ–∑–∏—Ü–∏—è
    return position && position.meta?.type === 'domination' ? position : null;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async clearAllPositions(): Promise<void> {
    this.logger.log(
      'üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π Domination (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)',
    );
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –Ω–µ –æ—á–∏—â–∞—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ PositionsStore –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ —Ç–∏–ø—É
  }

  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Strategy (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
  async onOpen(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }

  async onAdd(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }

  async onClose(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }

  async onBigClose(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }

  async onBigAdd(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }

  async onSmartVolumeOpen(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }

  async onBullishVolume(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }

  async onVolumeUp(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è TrendPivot —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ Domination)
  async onLongTrend(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onShortTrend(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onLongPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onShortPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onStrongLongPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onStrongShortPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è ThreeAlerts —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ Domination)
  async onBullRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBullMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBullPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBearPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Domination —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }
}
