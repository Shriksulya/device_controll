import { Strategy } from '../interfaces';
import { toBitgetSymbolId } from '../utils';
import { PositionsStore } from '../positions.store';
import { VolumeUpService } from '../../services/volume-up.service';
import { Logger } from '@nestjs/common';

// In-memory —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è SmartVolume
interface SmartVolumeState {
  symbol: string;
  botName: string;
  isReadyToClose: boolean;
  lastBullishVolume: number;
  lastSmartVolume: number;
  lastUpdate: number;
}

export class SmartVolumeStrategy implements Strategy {
  private readonly logger = new Logger(SmartVolumeStrategy.name);

  // In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è SmartVolume
  private smartVolumeStates = new Map<string, SmartVolumeState>();

  constructor(
    private readonly store: PositionsStore,
    private readonly volumeUpService: VolumeUpService,
  ) {}

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  private getStateKey(botName: string, symbol: string): string {
    return `${botName}:${symbol}`;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  private getOrCreateState(botName: string, symbol: string): SmartVolumeState {
    const key = this.getStateKey(botName, symbol);
    let state = this.smartVolumeStates.get(key);

    if (!state) {
      state = {
        symbol,
        botName,
        isReadyToClose: false,
        lastBullishVolume: 0,
        lastSmartVolume: 0,
        lastUpdate: Date.now(),
      };
      this.smartVolumeStates.set(key, state);
    }

    return state;
  }

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
  private clearState(botName: string, symbol: string): void {
    const key = this.getStateKey(botName, symbol);
    this.smartVolumeStates.delete(key);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç Bullish Volume (30 –º–∏–Ω—É—Ç)
  private isBullishVolumeActive(lastUpdate: number): boolean {
    const now = Date.now();
    const timeoutMs = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    return now - lastUpdate <= timeoutMs;
  }

  async onOpen(bot, alert) {
    this.logger.log(
      `üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è SmartVolume onOpen –¥–ª—è ${alert.symbol} @${alert.price}`,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏ 30m
    const timeframe = alert.timeframe || '30m';
    if (timeframe !== '30m') {
      this.logger.log(
        `‚è∏ SmartVolumeOpen —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º ${timeframe} - –ø—Ä–æ–ø—É—Å–∫–∞—é (–Ω—É–∂–µ–Ω 30m)`,
      );
      // –ú–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      return;
    }

    this.logger.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ${alert.symbol}`);
    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (existing) {
      this.logger.log(
        `üìä –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è: ${existing.fillsCount}/${bot.cfg.maxFills ?? 3} –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π`,
      );
      if (existing.fillsCount >= (bot.cfg.maxFills ?? 3)) {
        this.logger.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π`);
        await bot.notify(
          `‚ö†Ô∏è ${bot.name}: max fills reached for ${alert.symbol}`,
        );
        return;
      }
      this.logger.log(`‚ûï –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–∫—É–ø–∫–µ`);
      return this.onAdd(bot, alert);
    }
    this.logger.log(`üÜï –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞—é –Ω–æ–≤—É—é`);

    const symbolId = toBitgetSymbolId(alert.symbol);
    this.logger.log(`üîß –°–∏–º–≤–æ–ª –¥–ª—è –±–∏—Ä–∂–∏: ${symbolId}`);

    if (bot.exchange.isAllowed && !bot.exchange.isAllowed(symbolId)) {
      this.logger.log(`‚ùå –°–∏–º–≤–æ–ª ${symbolId} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω`);
      await bot.notify(`‚ö†Ô∏è ${bot.name}: ${symbolId} not allowed`);
      return;
    }
    this.logger.log(`‚úÖ –°–∏–º–≤–æ–ª ${symbolId} —Ä–∞–∑—Ä–µ—à–µ–Ω`);
    this.logger.log(`‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–ª–µ—á–æ: ${bot.cfg.smartvol.leverage}`);
    await bot.exchange.ensureLeverage?.(
      symbolId,
      String(bot.cfg.smartvol.leverage),
    );

    this.logger.log(`üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è $${bot.baseUsd()}`);
    const size = await bot.exchange.calcSizeFromUsd?.(
      symbolId,
      Number(alert.price),
      bot.baseUsd(),
    );
    this.logger.log(`üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${size}`);

    this.logger.log(`üìà –†–∞–∑–º–µ—â–∞—é —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä`);
    await bot.exchange.placeMarket?.(
      symbolId,
      'buy',
      String(size),
      `${bot.name}-open-${Date.now()}`,
    );
    const baseUsd = bot.baseUsd();
    if (!baseUsd || isNaN(baseUsd)) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞: baseUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: ${baseUsd}`,
      );
      await bot.notify(
        `‚ùå ${bot.name}: –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - baseUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`,
      );
      return;
    }

    this.logger.log(
      `üíæ –°–æ–∑–¥–∞—é –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î: ${bot.name}, ${alert.symbol}, ${alert.price}, $${baseUsd}`,
    );
    const position = await this.store.open(
      bot.name,
      alert.symbol,
      alert.price,
      String(baseUsd),
    );
    this.logger.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î —Å ID: ${position.id}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ SmartVolume
    this.getOrCreateState(bot.name, alert.symbol);

    const positionInfo = this.store.getPositionInfo(
      position,
      Number(alert.price),
    );

    await bot.notify(
      `‚úÖ ${bot.name}: SMART VOLUME OPEN ${alert.symbol} @${alert.price} $${baseUsd}\n` +
        `üìä –†–∞–∑–º–µ—Ä: ${positionInfo.pnl?.totalSize || '0'} ${alert.symbol.replace('USDT', '')}\n` +
        `üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: $${positionInfo.pnl?.avgEntryPrice || alert.price}\n` +
        `üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${positionInfo.pnl?.currentPrice || alert.price}\n` +
        `üíµ PnL: $${positionInfo.pnl?.pnl || '0'} (${positionInfo.pnl?.pnlPercent || '0'}%)`,
    );
  }

  async onAdd(bot, alert) {
    this.logger.log(
      `‚ûï –°—Ç—Ä–∞—Ç–µ–≥–∏—è SmartVolume onAdd –¥–ª—è ${alert.symbol} @${alert.price}`,
    );

    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (!existing) {
      this.logger.log(
        `‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${alert.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î –¥–ª—è –±–æ—Ç–∞ ${bot.name}, –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–æ–∫—É–ø–∫—É`,
      );
      return;
    }

    if (existing.fillsCount >= (bot.cfg.maxFills ?? 3)) {
      await bot.notify(`‚ö†Ô∏è ${bot.name}: max fills reached for ${alert.symbol}`);
      return;
    }

    const addUsd = bot.addUsd();
    if (!addUsd || isNaN(addUsd)) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞: addUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: ${addUsd}`,
      );
      await bot.notify(
        `‚ùå ${bot.name}: –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - addUsd –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`,
      );
      return;
    }

    const symbolId = toBitgetSymbolId(alert.symbol);
    const size = await bot.exchange.calcSizeFromUsd?.(
      symbolId,
      Number(alert.price),
      addUsd,
    );
    await bot.exchange.placeMarket?.(
      symbolId,
      'buy',
      String(size),
      `${bot.name}-add-${Date.now()}`,
    );
    await this.store.add(existing, alert.price, String(addUsd));

    const updatedPosition = await this.store.findOpen(bot.name, alert.symbol);
    if (updatedPosition) {
      const positionInfo = this.store.getPositionInfo(
        updatedPosition,
        Number(alert.price),
      );

      await bot.notify(
        `‚ûï ${bot.name}: SMART VOLUME ADD ${alert.symbol} @${alert.price} $${addUsd}\n` +
          `üìä –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${positionInfo.pnl?.totalSize || '0'} ${alert.symbol.replace('USDT', '')}\n` +
          `üí∞ –ù–æ–≤–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: $${positionInfo.pnl?.avgEntryPrice || alert.price}\n` +
          `üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${positionInfo.pnl?.currentPrice || alert.price}\n` +
          `üíµ PnL: $${positionInfo.pnl?.pnl || '0'} (${positionInfo.pnl?.pnlPercent || '0'}%)`,
      );
    } else {
      await bot.notify(
        `‚ûï ${bot.name}: SMART VOLUME ADD ${alert.symbol} @${alert.price} $${addUsd}`,
      );
    }
  }

  async onClose(bot, alert) {
    this.logger.log(
      `üîÑ SmartVolume onClose –¥–ª—è ${alert.symbol} - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏`,
    );

    // –í —ç—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ onClose –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ SmartVolume –∏ Bullish Volume
    // –ú–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  }

  async onBigClose(bot, alert) {
    this.logger.log(
      `üö® SmartBigClose –¥–ª—è ${alert.symbol} - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–π –ø–æ–∑–∏—Ü–∏–∏`,
    );

    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (!existing) {
      this.logger.log(
        `‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è ${alert.symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î –¥–ª—è –±–æ—Ç–∞ ${bot.name}, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–∫—Ä—ã—Ç–∏–µ`,
      );
      return;
    }

    try {
      await bot.exchange.flashClose?.(alert.symbol, 'long');
      const finalPnL = this.store.calculatePnL(existing, Number(alert.price));
      await this.store.close(existing, alert.price);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ SmartVolume
      this.clearState(bot.name, alert.symbol);

      await bot.notify(
        `üö® ${bot.name}: SMART VOLUME BIG CLOSE ${alert.symbol} @${alert.price}\n` +
          `üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${finalPnL.totalSize} ${alert.symbol.replace('USDT', '')}\n` +
          `üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: $${finalPnL.avgEntryPrice}\n` +
          `üìà –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: $${finalPnL.currentPrice}\n` +
          `üíµ –§–∏–Ω–∞–ª—å–Ω—ã–π PnL: $${finalPnL.pnl} (${finalPnL.pnlPercent}%)`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ ${alert.symbol}: ${error.message}`,
      );
      throw error;
    }
  }

  async onBigAdd(bot, alert) {
    this.logger.log(`üöÄ SmartBigAdd –¥–ª—è ${alert.symbol} - –±–æ–ª—å—à–∞—è –¥–æ–∫—É–ø–∫–∞`);

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è SmartBigAdd (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    await bot.notify(
      `üöÄ ${bot.name}: SMART VOLUME BIG ADD —Å–∏–≥–Ω–∞–ª –¥–ª—è ${alert.symbol} @${alert.price}`,
    );
  }

  async onVolumeUp(bot, alert) {
    this.logger.log(
      `üìä SmartVolume –¥–ª—è ${alert.symbol} (${alert.timeframe}) —Å –æ–±—ä–µ–º–æ–º ${alert.volume}`,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (!existing) {
      this.logger.log(
        `üìä –ü–æ–∑–∏—Ü–∏—è ${alert.symbol} –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é SmartVolume`,
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const state = this.getOrCreateState(bot.name, alert.symbol);

    this.logger.log(
      `üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ${alert.symbol}: isReadyToClose=${state.isReadyToClose}, lastUpdate=${new Date(state.lastUpdate).toISOString()}`,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ Bullish Volume (30 –º–∏–Ω—É—Ç)
    const isActive = this.isBullishVolumeActive(state.lastUpdate);
    this.logger.log(
      `‚è∞ Bullish Volume –∞–∫—Ç–∏–≤–µ–Ω: ${isActive} (–ø—Ä–æ—à–ª–æ ${Math.round((Date.now() - state.lastUpdate) / 1000)} —Å–µ–∫—É–Ω–¥)`,
    );

    if (!state.isReadyToClose || !isActive) {
      this.logger.log(
        `üìä Bullish Volume –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è ${alert.symbol}, –ø—Ä–æ–ø—É—Å–∫–∞—é SmartVolume`,
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const previousVolume = state.lastSmartVolume;

    this.logger.log(
      `üìä –°—Ä–∞–≤–Ω–∏–≤–∞—é –æ–±—ä–µ–º—ã: —Ç–µ–∫—É—â–∏–π=${alert.volume}, –ø—Ä–µ–¥—ã–¥—É—â–∏–π=${previousVolume}`,
    );

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    if (previousVolume > 0 && alert.volume < previousVolume) {
      this.logger.log(
        `üìâ –û–±—ä–µ–º —É–º–µ–Ω—å—à–∏–ª—Å—è —Å ${previousVolume} –¥–æ ${alert.volume} –¥–ª—è ${alert.symbol} - –∑–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é`,
      );

      try {
        await bot.exchange.flashClose?.(alert.symbol, 'long');
        const finalPnL = this.store.calculatePnL(existing, Number(alert.price));
        await this.store.close(existing, alert.price);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ SmartVolume
        this.clearState(bot.name, alert.symbol);

        await bot.notify(
          `üìâ ${bot.name}: SMART VOLUME CLOSE ${alert.symbol} @${alert.price}\n` +
            `üìä –û–±—ä–µ–º —É–º–µ–Ω—å—à–∏–ª—Å—è: ${previousVolume} ‚Üí ${alert.volume}\n` +
            `üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${finalPnL.totalSize} ${alert.symbol.replace('USDT', '')}\n` +
            `üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: $${finalPnL.avgEntryPrice}\n` +
            `üìà –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: $${finalPnL.currentPrice}\n` +
            `üíµ –§–∏–Ω–∞–ª—å–Ω—ã–π PnL: $${finalPnL.pnl} (${finalPnL.pnlPercent}%)`,
        );
      } catch (error) {
        this.logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ ${alert.symbol}: ${error.message}`,
        );
        throw error;
      }
    } else {
      this.logger.log(
        `üìä –û–±—ä–µ–º –ù–ï —É–º–µ–Ω—å—à–∏–ª—Å—è: ${alert.volume} >= ${previousVolume}`,
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
      state.lastSmartVolume = alert.volume;
      state.lastUpdate = Date.now();

      this.logger.log(
        `üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: lastSmartVolume=${state.lastSmartVolume}, lastUpdate=${new Date(state.lastUpdate).toISOString()}`,
      );
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bullish Volume
  async onBullishVolume(bot, alert) {
    this.logger.log(
      `üêÇ Bullish Volume –¥–ª—è ${alert.symbol} - –∞–∫—Ç–∏–≤–∏—Ä—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–∫—Ä—ã—Ç–∏—é`,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
    const existing = await this.store.findOpen(bot.name, alert.symbol);
    if (!existing) {
      this.logger.log(
        `üêÇ –ü–æ–∑–∏—Ü–∏—è ${alert.symbol} –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é Bullish Volume`,
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const state = this.getOrCreateState(bot.name, alert.symbol);

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–∫—Ä—ã—Ç–∏—é
    state.isReadyToClose = true;
    state.lastBullishVolume = Date.now();
    state.lastUpdate = Date.now();

    this.logger.log(
      `üêÇ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–∫—Ä—ã—Ç–∏—é –¥–ª—è ${alert.symbol} - –æ–∂–∏–¥–∞—é —É–º–µ–Ω—å—à–µ–Ω–∏—è –æ–±—ä–µ–º–∞`,
    );

    await bot.notify(
      `üêÇ ${bot.name}: Bullish Volume –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${alert.symbol} - –≥–æ—Ç–æ–≤ –∫ –∑–∞–∫—Ä—ã—Ç–∏—é –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –æ–±—ä–µ–º–∞`,
    );
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è SmartVolumeOpen (–∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω onOpen)
  async onSmartVolumeOpen(bot, alert) {
    return this.onOpen(bot, alert);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è TrendPivot —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ SmartVolume)
  async onLongTrend(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onShortTrend(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onLongPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onShortPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onStrongLongPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onStrongShortPivotPoint(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è ThreeAlerts —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ SmartVolume)
  async onBullRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearRelsi(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBullMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onBearMarubozu(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBullPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }

  async onIstinoeBearPogloshenie(bot: any, alert: any): Promise<void> {
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SmartVolume —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  }
}
