// src/services/telegram.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios from 'axios';

export type BotType =
  | 'bot1'
  | 'bot2'
  | 'bot3'
  | 'bot4'
  | 'domination'
  | 'trend-pivot-15m'
  | 'trend-pivot-1h'
  | 'three-alerts';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);

  constructor(private readonly configService: ConfigService) {}

  async sendMessage(text: string, botType: BotType): Promise<void> {
    this.logger.log(
      `üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–µ—Ä–µ–∑ ${botType}: ${text.substring(0, 100)}...`,
    );

    const botConfig = this.configService.get(`telegram.${botType}`);
    if (!botConfig?.token || !botConfig?.chatId) {
      this.logger.warn(`${botType} token or chatId is not configured`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∏ chatId
    if (!botConfig.token.includes(':')) {
      this.logger.error(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è ${botType}: –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':'`,
      );
      return;
    }

    if (
      !botConfig.chatId.startsWith('-') &&
      !botConfig.chatId.startsWith('@')
    ) {
      this.logger.error(
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chatId –¥–ª—è ${botType}: –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '-' –∏–ª–∏ '@'`,
      );
      return;
    }

    this.logger.log(
      `üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –¥–ª—è ${botType}: —Ç–æ–∫–µ–Ω=${botConfig.token.substring(0, 10)}..., chatId=${botConfig.chatId}`,
    );

    const url = `https://api.telegram.org/bot${botConfig.token}/sendMessage`;
    try {
      const response = await axios.post(url, {
        chat_id: botConfig.chatId,
        text,
        parse_mode: 'HTML',
      });
      this.logger.log(
        `‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ${botType} (${botConfig.name}) - —Å—Ç–∞—Ç—É—Å: ${response.status}`,
      );
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      if (error.response) {
        // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        this.logger.error(
          `‚ùå Telegram –æ—à–∏–±–∫–∞ –¥–ª—è ${botType}: ${error.response.status} - ${error.response.data?.description || error.response.statusText}`,
        );
      } else if (error.request) {
        // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
        this.logger.error(`‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${botType}: ${error.message}`);
      } else {
        // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${botType}: ${error.message}`);
      }
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É
  async testConnection(botType: BotType): Promise<boolean> {
    try {
      const botConfig = this.configService.get(`telegram.${botType}`);
      if (!botConfig?.token || !botConfig?.chatId) {
        this.logger.warn(`${botType} token or chatId is not configured`);
        return false;
      }

      const url = `https://api.telegram.org/bot${botConfig.token}/getMe`;
      const response = await axios.get(url);

      if (response.data?.ok) {
        this.logger.log(
          `‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É —É—Å–ø–µ—à–µ–Ω –¥–ª—è ${botType}: ${response.data.result.username}`,
        );
        return true;
      } else {
        this.logger.error(
          `‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è ${botType}: ${response.data?.description || 'Unknown error'}`,
        );
        return false;
      }
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ–ª–µ–≥—Ä–∞–º—É –¥–ª—è ${botType}: ${error.message}`,
      );
      return false;
    }
  }
}
